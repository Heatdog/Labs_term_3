Вариант 3



1.Разработать класс "двоичное число" в соответствии со следующим заданием:

Состояние класса -

Целое двоичное число в прямом коде со знаком определяется его длиной (количество цифр в числе, например, до 74) и массивом значений двоичных цифр (типа char). Число со знаком хранится в прямом коде. При выполнении арифметических операций использовать дополнительный код. Память под массив выделяется статически, во время компиляции, и задается массивом фиксированного предельного размера.

Протокол класса -

Определяет возможности создания и инициализации экземпляров класса и правила их использования (методы класса).

Предусмотреть следующие возможности:

1) пустой конструктор для инициализации экземпляров и массивов экземпляров класса по умолчанию;

2) создание экземпляров класса с инициализацией значением целого числа типа long;


3) создание экземпляров класса с инициализацией значением числа как строки символов;

4) ввод экземпляров класса из входного потока и вывод их значений в выходной поток;

5) получение дополнительного кода числа;

6) выполнение операции сложения чисел с разными знаками в дополнительном коде;

7) выполнение операции увеличения числа на единицу до использования числа;

8) выполнение операции уменьшения числа после его использования;

9) выполнение операции определения знака числа.

2. Проектирование класса рекомендуется начать с представления состояния класса, учитывающего заданные операции, а затем реализации конструкторов и метода вывода. Для отладки и исчерпывающего тестирования других методов разработанного класса реализовать диалоговую программу, которая позволяет вводить параметры отлаживаемых методов. Для обработки ошибочных ситуаций использовать механизм исключительных ситуаций.

3. Повторить разработку класса, реализовав отдельные методы (там, где это оправданно), перегруженными операторами. Состав перегруженных операторов целесообразно согласовать с преподавателем.

4. Еще раз повторить разработку класса при условии, что память под массив необходимой длины выделяется динамически, во время выполнения программы (с помощью оператора new; память задается указателем на char в состоянии класса). Для хранения данных в экземпляре класса не должна использоваться лишняя память.

Дополнить интерфейс класса следующими возможностями:

* создание экземпляра класса с его инициализацией другим экземпляром класса (копирующий конструктор);

* переопределение экземпляра класса (с помощью перегруженного оператора присваивания).

Разработать и реализовать прикладную программу, использующую класс, разработанный другим студентом. Задание для прикладной программы разработать самостоятельно и согласовать с преподавателем.